#include <stdio.h>
#include <stdlib.h>
#include <stdint.h>
#include <global_include.h>
#include <x1_include.h>
#include <pthread.h>

#define LOCAL_ATTACH_POINT "c1_group_14"

void* sensor_send_thread(void*);

int main(void) {
	printf("\n****** Software Messaging Client for Controller Server ******\n\n");
	pthread_t char_thread;
	pthread_create(&char_thread, NULL, sensor_send_thread, NULL);
	pthread_join(char_thread, NULL);
	return EXIT_SUCCESS;
}

void* sensor_send_thread(void* data){
	message_data_t msg;
	message_data_t reply;

    msg.sending_node = 5; // set message signal
    msg.receiving_node = NODE_CONTROLLER;
    msg.msg_type = MSG_CURRENT_STATE_REQUEST;

	// Main Loop
	while(1){
		printf("Please select receiving node\n");
		printf(" 0 -> NODE_I1\n 1 -> NODE_I2\n 2 -> NODE_X1\n 3 -> NODE_CONTROLLER\n");
		char x = getchar();
		while(getchar() != '\n');
		switch(x){
			case '0':
				msg.receiving_node = NODE_I1;
				break;
			case '1':
				msg.receiving_node = NODE_I2;
				break;
			case '2':
				msg.receiving_node = NODE_X1;
				break;
			case '3':
				break;
		}

		printf("  a -> Update Current State\n  b -> Send bad request\n '' -> NYI\n\n");
		x = getchar();
		while(getchar() != '\n'); // Get remaining characters and discard
		switch(x){
			case 'a':
				printf("Enter the state number\n");
				msg.msg_type = MSG_CURRENT_STATE_UPDATE;
				msg.data = getchar();
				while(getchar() != '\n');
				reply = send_message(&msg, C1_QNET_ATTACH_POINT);
				if(reply.msg_type == MSG_ERROR){
					switch(reply.data){
						case MSG_CONNECTION_ERROR:
							printf("Connection Error!\n");
							break;
						case MSG_SENDING_ERROR:
							printf("Message did not send\n");
							break;
						case MSG_BAD_REQUEST:
							printf("Server rejected this message type\n");
							break;
					}
				}else{
					printf("Success! Received from node %d, data: %d\n", reply.sending_node, reply.data);
				}
				break;
			case 'b':
				printf("Sending bad request\n");
				msg.msg_type = MSG_CONTROL_STATE_LOCK;
				reply = send_message(&msg, C1_QNET_ATTACH_POINT);

				// Handle Errors
				if(reply.msg_type == MSG_ERROR){
					switch(reply.data){
						case MSG_CONNECTION_ERROR:
							printf("Connection Error!\n");
							break;
						case MSG_SENDING_ERROR:
							printf("Message did not send\n");
							break;
						case MSG_BAD_REQUEST:
							printf("Controller rejected this message type\n");
							break;
					}
				}else{
					printf("Success! Received from node %d, data: %d\n", reply.sending_node, reply.data);
				}
				break;
				break;
			default:
				break;
		}
	}
}
